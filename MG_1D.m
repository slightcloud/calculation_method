%**************************************************************************
% 该子函数使用多格点的方法求解1D空间电势，所有的边界条件都是phi_boundary = 0
%**************************************************************************
function phi = MG_1D(rho,n,tol,w,its_f,its_c,phi_in)
%***************************************************************
% rho代表的是每个格点上的电荷密度；
% n代表的是1D系统的格点总数；
% tol代表的是迭代结果的容差；
% w代表的是松弛因子，取值范围为1~2；
% its_f代表的是初期在细化网格上的求解次数，取值为几十或几百，在满足条件的情况下尽量小；
% its_c代表的是残差在粗化网格上的求解次数，几百；
% phi_in代表的是电势迭代的初始值，该值使用上一次迭代求出的结果以提高速度。
%***************************************************************
global dz EPS0
solver_it = 20000;     % 迭代步数
phi = phi_in;          % 给电势赋初值，初值为上一次求出的电势，希望能够提高收敛速度
n_c = ceil(n/2);       % x方向的粗化格点数
dz_c = 2*dz;           % 粗化格点的间距
R_f = zeros(n,1);      % 用于存储细化网格的残差
R_c = zeros(n_c,1);    % 用于存储粗化网格的残差

eps_f = zeros(n,1);    % 用于存储细化网格格点上的误差，eps = phi(n)-phi_real

%**************************************************************************
% 开始主循环
%**************************************************************************
for ts = 1:solver_it
    
    % 1) 在细化网格上迭代几次
    for nn = 1:its_f
        for i = 2:n-1
            g = 0.5*(phi(i-1,1)+phi(i+1,1)+dz*dz*rho(i,1)/EPS0);
            phi(i,1) = phi(i,1)+w*(g-phi(i,1));
        end
    end
    
    % 2) 在细化网格上计算残差，R = A*phi+rho/EPS0
    R_f(2:n-1,1) = (phi(1:n-2,1)-2*phi(2:n-1,1)+phi(3:n,1))/(dz*dz)+rho(2:n-1,1)/EPS0;
    
    % 2b) 检查收敛情况
    r_sum = sum(R_f.^2);   % 求出所有残差的和
    norm = sqrt(r_sum)/n;  % 平均每个格点的残差值，实际上是一个标准差
    
    fprintf('The residual is %g\n',norm);
    if norm < tol                           %将平均残差与设定容差进行对比，若满足残差要求则停止循环
        clc;
        break;
    end
    
    % 3) 将细化网格上的残差重新分配到粗化网格上
    R_c(0.5*((3:2:n-2)+1),1) = 0.25*(R_f(2:2:n-3,1)+2*R_f(3:2:n-2,1)+R_f(4:2:n-1,1));
    
    % 4) 在粗化网格上将误差迭代几次
    eps_c = zeros(n_c,1);
    for nn = 1:its_c
        for i = 2:n_c-1
            g = 0.5*(eps_c(i-1,1)+eps_c(i+1,1)-dz_c*dz_c*R_c(i,1));
            eps_c(i,1) = eps_c(i,1)+w*(g-eps_c(i,1));
        end
    end
    
    % 5) 将粗化网格上的误差插值到细化网格上
    eps_f(3:2:n-2,1) = eps_c(0.5*((3:2:n-2)+1),1);
    eps_f(2:2:n-1,1) = 0.5*(eps_c(0.5*(2:2:n-1),1)+eps_c(0.5*(2:2:n-1)+1,1));
    
    % 6) 在细化网格上更新电势的解
    phi = phi-eps_f;
end